function net = InitializeTextonNetwork103( input_args )

f=1/100 ;
net.layers = {} ;
% Inicalmente se tiene 5 etapas en cuatro de ellas se realiza conv, RelU y
% pooling. 
%Primera Etapa: Inicialmente se tiene imagenes de 64x 64.
net.layers{end+1} = struct('type', 'conv', ...
                           'filters',f*randn(5,5,1,50, 'single'),...
                           'biases', zeros(1,50,'single'), ...
                           'stride', 1, ...     					   
                           'pad', 0) ;
%Al aplicar la convolución queda 60x60x50
                      
net.layers{end+1} = struct('type', 'relu') 
%Al aplicar  Relu queda 60x60x50

net.layers{end+1} = struct('type', 'pool', ...
                            'method', 'max', ...
                            'pool', [2 2], ...
                            'stride', 2, ...
                            'pad', 0) 
%Al aplicar pooling  el tamaño de las imágenes se reducen a la mitad
% es decir 30x30x50
%Segunda Etapa
net.layers{end+1} = struct('type', 'conv', ...
                           'filters',f*randn(5,5,50,150, 'single'),...
                           'biases', zeros(1,150,'single'), ...
                           'stride', 1, ...     					   
                           'pad', 0) ;
 %Al aplicar la convolución queda  26x26x150                   
net.layers{end+1} = struct('type', 'relu') 
%Al aplicar  Relu queda 26x26x150  
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) 
%Al aplicar pooling  el tamaño de las imágenes se reducen a la mitad
% es decir 13x13x150
%Tercera Etapa
net.layers{end+1} = struct('type', 'conv', ...
                           'filters',f*randn(4,4,150,500, 'single'),...
                           'biases', zeros(1,500,'single'), ...
                           'stride', 1, ...     					   
                           'pad', 0) ;
  %Al aplicar la convolución queda  10x10x500                      
net.layers{end+1} = struct('type', 'relu') 
%Al aplicar  Relu queda 10x10x500  
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) 
 %Al aplicar pooling  el tamaño de las imágenes se reducen a la mitad
% es decir 5x5x500
%Cuarta Etapa
net.layers{end+1} = struct('type', 'conv', ...
                           'filters',f*randn(2,2,500,150, 'single'),...
                           'biases', zeros(1,150,'single'), ...
                           'stride', 1, ...     					   
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'relu') 
%Al aplicar la convolución queda y RelU  4x4x150 
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) 
  %Al aplicar pooling  el tamaño de las imágenes se reducen a la mitad
% es decir 2x2x150
% %Quinta Etapa

net.layers{end+1} = struct('type', 'conv', ...
                           'filters',f*randn(4,4,150,25, 'single'),...
                           'biases', zeros(1,25,'single'), ...
                           'stride', 1, ...     					   
                           'pad', 0) ;                      
%Al aplicar la convolución queda   1x1x25  
net.layers{end+1} = struct('type', 'softmaxloss') ;



end
